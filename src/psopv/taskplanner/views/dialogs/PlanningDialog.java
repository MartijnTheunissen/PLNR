package psopv.taskplanner.views.dialogs;

import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.ArrayList;
import java.util.Observable;

import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JTextField;

import net.miginfocom.swing.MigLayout;
import psopv.taskplanner.config.ApplicationSettings;
import psopv.taskplanner.controllers.TaskPlannerController;
import psopv.taskplanner.models.Calendar;
import psopv.taskplanner.models.TaskList;
import psopv.taskplanner.models.TaskPlannerModel;
import psopv.taskplanner.planningstrategies.PlanningStrategy;
import be.uhasselt.oo2.mvc.Controller;
import be.uhasselt.oo2.mvc.View;

import com.alee.extended.list.CheckBoxCellData;
import com.alee.extended.list.CheckBoxListModel;
import com.alee.extended.list.WebCheckBoxList;

/**
 * 
 * Planning dialog
 *
 * @since May 11, 2014 12:47:36 AM
 * @author Martijn Theunissen
 */
public class PlanningDialog extends JDialog implements View, ActionListener, MouseListener {
	private Observable					m_model;
	private Controller					m_controller;

	/** Automatically generated GUI components */
	private JLabel						m_lblPlanningAlgorithm;
	private JComboBox<PlanningStrategy>	m_comboBox;
	private JLabel						m_lblTaskList;
	private ApplicationSettings			m_settings	= ApplicationSettings.getInstance();	// for localized strings.
	private JComboBox<TaskList>			m_comboBox2;
	private JTextField					calName;
	private JLabel						lblCalName;
	private ArrayList<Calendar>			m_calendars;
	private WebCheckBoxList				m_list;
	private CheckBoxListModel			m_checkBoxListModel;
	private JLabel						lblAvoidCalendars;
	private JButton						btnPlan;
	private JButton						btnCancel_1;

	/**
	 * Create a new AddtaskDialog
	 * @param model observable model
	 * @param contr the controller, may be null
	 */
	public PlanningDialog(Observable model, Controller contr) {
		m_model = model;
		if (contr == null)
			contr = defaultController(model);
		m_controller = contr;

		initializeGUIComponents();
		clearComponents();
		getContentPane().setPreferredSize(new Dimension(500, 300));

		this.setTitle(ApplicationSettings.getInstance().getLocalizedMessage("plan.title"));
		this.setLocationRelativeTo(null);
	}

	/**
	 * Automatically generated by window builder
	 */
	private void initializeGUIComponents() {
		getContentPane().removeAll();
		getContentPane().setLayout(new MigLayout("", "[163.00][152.00,grow][107.00]", "[][][][grow][]"));

		lblCalName = new JLabel(ApplicationSettings.getInstance().getLocalizedMessage("plan.calname"));
		getContentPane().add(lblCalName, "cell 0 0,alignx left");

		calName = new JTextField();
		getContentPane().add(calName, "cell 1 0 2 1,growx");
		calName.setColumns(10);

		m_lblPlanningAlgorithm = new JLabel(ApplicationSettings.getInstance().getLocalizedMessage("plan.alg"));
		getContentPane().add(m_lblPlanningAlgorithm, "cell 0 1,alignx left");

		m_comboBox = new JComboBox<PlanningStrategy>();
		getContentPane().add(m_comboBox, "cell 1 1 2 1,growx");

		m_lblTaskList = new JLabel(ApplicationSettings.getInstance().getLocalizedMessage("plan.tl"));
		getContentPane().add(m_lblTaskList, "cell 0 2,alignx left");

		m_comboBox2 = new JComboBox<TaskList>();
		getContentPane().add(m_comboBox2, "cell 1 2 2 1,growx");

		lblAvoidCalendars = new JLabel(ApplicationSettings.getInstance().getLocalizedMessage("plan.avoid"));
		getContentPane().add(lblAvoidCalendars, "cell 0 3,aligny top");

		m_list = new WebCheckBoxList(createCalendarData());
		m_list.setSelectedIndex(0);
		m_list.setEditable(false);
		m_list.setUnselectable(true);
		getContentPane().add(m_list, "cell 1 3 2 1,grow");

		btnCancel_1 = new JButton(ApplicationSettings.getInstance().getLocalizedMessage("plan.cancel"));
		btnCancel_1.addActionListener(this);
		getContentPane().add(btnCancel_1, "cell 1 4,growx");

		btnPlan = new JButton(ApplicationSettings.getInstance().getLocalizedMessage("plan.plan"));
		btnPlan.addActionListener(this);
		getContentPane().add(btnPlan, "cell 2 4,growx");
		m_list.addMouseListener(this);

		updateButtons();

	}

	/**
	 * @return the checkboxlist model
	 */
	private CheckBoxListModel createCalendarData() {
		m_checkBoxListModel = new CheckBoxListModel();
		m_calendars = ((TaskPlannerModel) m_model).getCalendars();
		for (int i = 0; i < m_calendars.size(); i++)
			m_checkBoxListModel.addCheckBoxElement(m_calendars.get(i), m_calendars.get(i).isActive());
		return m_checkBoxListModel;
	}

	/**
	 * clear the components of every field on the jdialog
	 */
	public void clearComponents() {
		calName.setText("");

		TaskPlannerModel mod = (TaskPlannerModel) getModel();
		m_comboBox.removeAllItems();

		ArrayList<PlanningStrategy> strategies = mod.getPlanningStrategies();
		for (PlanningStrategy ps : strategies)
			m_comboBox.addItem(ps);

		ArrayList<TaskList> tasklists = mod.getTaskLists();
		for (TaskList tl : tasklists)
			m_comboBox2.addItem(tl);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.util.Observer#update(java.util.Observable, java.lang.Object)
	 */
	@Override
	public void update(Observable o, Object arg) {
		this.setTitle(m_settings.getLocalizedMessage("plan.title"));
		m_model = o;

		initializeGUIComponents();
		clearComponents();

	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see be.uhasselt.oo2.mvc.View#setController(be.uhasselt.oo2.mvc.Controller)
	 */
	@Override
	public void setController(Controller controller) {
		m_controller = controller;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see be.uhasselt.oo2.mvc.View#getController()
	 */
	@Override
	public Controller getController() {
		if (m_controller == null)
			return defaultController(getModel());
		else
			return m_controller;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see be.uhasselt.oo2.mvc.View#setModel(java.util.Observable)
	 */
	@Override
	public void setModel(Observable model) {
		m_model = model;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see be.uhasselt.oo2.mvc.View#getModel()
	 */
	@Override
	public Observable getModel() {
		return m_model;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see be.uhasselt.oo2.mvc.View#defaultController(java.util.Observable)
	 */
	@Override
	public Controller defaultController(Observable model) {
		return new TaskPlannerController(model);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
	 */
	@Override
	public void actionPerformed(ActionEvent e) {
		if (e.getSource() == btnPlan) {
			PlanningStrategy strategy = (PlanningStrategy) m_comboBox.getSelectedItem();
			TaskList list = (TaskList) m_comboBox2.getSelectedItem();

			((TaskPlannerController) getController()).setPlanningStrategy(strategy);
			ArrayList<Calendar> avoid = new ArrayList<Calendar>();
			for (int i = 0; i < m_list.getModelSize(); i++) {
				if (m_list.isCheckBoxSelected(i))
					avoid.add((Calendar) ((CheckBoxCellData) m_list.getValueAt(i)).getUserObject());
			}
			((TaskPlannerController) getController()).plan(calName.getText(), list, avoid);
			this.clearComponents();
		}
		this.dispose();
	}

	private void updateButtons() {
		for (int i = 0; i < m_list.getModelSize(); i++) {
			if (m_list.isCheckBoxSelected(i)) {
				btnPlan.setEnabled(true);
				return;
			}
		}
		btnPlan.setEnabled(false);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.awt.event.MouseListener#mouseClicked(java.awt.event.MouseEvent)
	 */
	@Override
	public void mouseClicked(MouseEvent e) {
		// TODO Auto-generated method stub

	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.awt.event.MouseListener#mousePressed(java.awt.event.MouseEvent)
	 */
	@Override
	public void mousePressed(MouseEvent e) {
		updateButtons();
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.awt.event.MouseListener#mouseReleased(java.awt.event.MouseEvent)
	 */
	@Override
	public void mouseReleased(MouseEvent e) {
		// TODO Auto-generated method stub

	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.awt.event.MouseListener#mouseEntered(java.awt.event.MouseEvent)
	 */
	@Override
	public void mouseEntered(MouseEvent e) {
		// TODO Auto-generated method stub

	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.awt.event.MouseListener#mouseExited(java.awt.event.MouseEvent)
	 */
	@Override
	public void mouseExited(MouseEvent e) {
		// TODO Auto-generated method stub

	}
}
