/**
 * 
 */
package psopv.taskplanner.views.dialogs;

import java.awt.Dimension;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.time.Duration;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.ZonedDateTime;
import java.util.ArrayList;
import java.util.Date;
import java.util.Observable;

import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JSpinner;
import javax.swing.JSpinner.DateEditor;
import javax.swing.JTextField;
import javax.swing.SpinnerDateModel;

import net.miginfocom.swing.MigLayout;
import psopv.taskplanner.config.ApplicationSettings;
import psopv.taskplanner.controllers.TaskPlannerController;
import psopv.taskplanner.models.Calendar;
import psopv.taskplanner.models.CalendarItem;
import psopv.taskplanner.models.TaskPlannerModel;
import be.uhasselt.oo2.mvc.Controller;
import be.uhasselt.oo2.mvc.View;

import com.alee.extended.date.WebDateField;
import com.alee.laf.scroll.WebScrollPane;
import com.alee.laf.text.WebTextArea;

/**
 * 
 * $Rev:: 139                                                  $:  Revision of last commit<br>
 * $Author:: tom.knaepen                                       $:  Author of last commit<br>
 * $Date:: 2014-06-03 13:25:22 +0200 (Tue, 03 Jun 2014)        $:  Date of last commit<br>
 *
 * Description:	<br>
 * ------------<br>
 * Provide a dialog for adding calendaritems.
 * <br>
 * Changes:<br>
 * ------------<br>
 * 1 - martijn.theunissen: initial version<br>
 * 2 - martijn.theunissen: multilanguage support<br>
 * 3 - <br>
 *
 * @since Apr 14, 2014 11:54:48 PM
 * @author Martijn Theunissen
 */
public class AddCalendarItemDialog extends JDialog implements View, ActionListener {

	private Observable			m_model;
	private Controller			m_controller;

	/** Automatically generated GUI components */
	private WebDateField		m_datepicker;

	private JTextField			m_textField;
	private JSpinner			m_timeSpinner;
	private DateEditor			m_timeEditor;
	private JButton				m_btnAdd;
	private JLabel				m_lblCalendar;
	private JComboBox<Calendar>	m_comboBox;
	private JLabel				m_lblName;
	private JLabel				m_lblDescription;
	private WebTextArea			m_textArea;
	private JLabel				m_lblStartDate;
	private JLabel				m_lblDuration;
	private JSpinner			m_spinner;
	private JLabel				m_lblHours;
	private JSpinner			m_spinner_1;
	private JLabel				m_lblMinutes;
	private ApplicationSettings	m_settings	= ApplicationSettings.getInstance();	// for localized strings.

	/**
	 * Create a new AddtaskDialog
	 * @param model observable model
	 * @param contr the controller, may be null
	 */
	public AddCalendarItemDialog(Observable model, Controller contr) {
		m_model = model;
		if (contr == null)
			contr = defaultController(model);
		m_controller = contr;

		initializeGUIComponents();
		clearComponents();
		getContentPane().setPreferredSize(new Dimension(500, 300));

		m_btnAdd = new JButton(m_settings.getLocalizedMessage("addci"));
		m_btnAdd.setFont(new Font("Dialog", Font.PLAIN, 12));
		m_btnAdd.addActionListener(this);
		getContentPane().add(m_btnAdd, "cell 2 8,growx");
		this.setTitle(m_settings.getLocalizedMessage("createcalitem.title"));
		pack();
		this.setLocationRelativeTo(null);
	}

	/**
	 * Automatically generated by window builder
	 */
	private void initializeGUIComponents() {
		getContentPane().removeAll();
		getContentPane().setLayout(new MigLayout("", "[][grow][]", "[][][][][grow][][][][]"));

		m_lblCalendar = new JLabel(m_settings.getLocalizedMessage("lblCal"));
		getContentPane().add(m_lblCalendar, "cell 0 2,alignx left");

		m_comboBox = new JComboBox<Calendar>();
		getContentPane().add(m_comboBox, "cell 1 2 2 1,growx");

		m_lblName = new JLabel(m_settings.getLocalizedMessage("lblName"));
		getContentPane().add(m_lblName, "cell 0 3,alignx left");

		m_textField = new JTextField();
		getContentPane().add(m_textField, "cell 1 3 2 1,growx");
		m_textField.setColumns(10);

		m_lblDescription = new JLabel(m_settings.getLocalizedMessage("lblDescription"));
		getContentPane().add(m_lblDescription, "cell 0 4,alignx left");

		m_textArea = new WebTextArea();
		m_textArea.setLineWrap(true);
		m_textArea.setWrapStyleWord(true);
		WebScrollPane areaScroll = new WebScrollPane(m_textArea);
		areaScroll.setPreferredSize(new Dimension(200, 150));
		getContentPane().add(areaScroll, "cell 1 4 2 1,grow");

		m_lblStartDate = new JLabel(m_settings.getLocalizedMessage("lblStartDate"));
		getContentPane().add(m_lblStartDate, "cell 0 5,alignx left");

		m_lblDuration = new JLabel(m_settings.getLocalizedMessage("lblDuration"));
		getContentPane().add(m_lblDuration, "cell 0 6,alignx left");

		m_spinner = new JSpinner();
		getContentPane().add(m_spinner, "cell 1 6,growx");

		m_lblHours = new JLabel(m_settings.getLocalizedMessage("hrs"));
		m_lblHours.setFont(new Font("Dialog", Font.PLAIN, 12));
		getContentPane().add(m_lblHours, "cell 2 6");

		m_datepicker = new WebDateField(new Date());
		getContentPane().add(m_datepicker, "cell 1 5,growx");

		m_timeSpinner = new JSpinner(new SpinnerDateModel());
		m_timeEditor = new JSpinner.DateEditor(m_timeSpinner, "HH:mm:ss");
		m_timeSpinner.setEditor(m_timeEditor);
		m_timeSpinner.setValue(new Date());
		getContentPane().add(m_timeSpinner, "cell 2 5");

		m_spinner_1 = new JSpinner();
		getContentPane().add(m_spinner_1, "cell 1 7,growx");
		m_spinner_1.setValue(0);

		m_lblMinutes = new JLabel(m_settings.getLocalizedMessage("mins"));
		m_lblMinutes.setFont(new Font("Dialog", Font.PLAIN, 12));
		getContentPane().add(m_lblMinutes, "cell 2 7");
	}

	public void setDate(ZonedDateTime start) {
		m_datepicker.setDate(Date.from(start.toInstant()));
		m_timeSpinner.setValue(Date.from(start.toInstant()));
	}

	/**
	 * clear the components of every field on the jdialog
	 */
	public void clearComponents() {
		TaskPlannerModel mod = (TaskPlannerModel) getModel();
		m_comboBox.removeAllItems();

		ArrayList<Calendar> calendars = mod.getCalendars();
		for (Calendar cal : calendars)
			m_comboBox.addItem(cal);
		m_spinner.setValue(1);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.util.Observer#update(java.util.Observable, java.lang.Object)
	 */
	@Override
	public void update(Observable o, Object arg) {
		this.setTitle(m_settings.getLocalizedMessage("createcalitem.title"));
		m_model = o;

		initializeGUIComponents();
		clearComponents();

	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see be.uhasselt.oo2.mvc.View#setController(be.uhasselt.oo2.mvc.Controller)
	 */
	@Override
	public void setController(Controller controller) {
		m_controller = controller;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see be.uhasselt.oo2.mvc.View#getController()
	 */
	@Override
	public Controller getController() {
		if (m_controller == null)
			return defaultController(getModel());
		else
			return m_controller;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see be.uhasselt.oo2.mvc.View#setModel(java.util.Observable)
	 */
	@Override
	public void setModel(Observable model) {
		m_model = model;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see be.uhasselt.oo2.mvc.View#getModel()
	 */
	@Override
	public Observable getModel() {
		return m_model;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see be.uhasselt.oo2.mvc.View#defaultController(java.util.Observable)
	 */
	@Override
	public Controller defaultController(Observable model) {
		return new TaskPlannerController(model);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
	 */
	@Override
	public void actionPerformed(ActionEvent e) {
		if (e.getSource() == m_btnAdd) {
			String summary = m_textField.getText();
			String desc = m_textArea.getText();

			Duration duration = Duration.ofMinutes(((Integer) m_spinner.getValue()) * 60 + (Integer) m_spinner_1.getValue());
			String time = m_timeEditor.getFormat().format(m_timeSpinner.getValue()); // "HH:mm:ss"
			int hr = Integer.parseInt(time.substring(0, 2));
			int min = Integer.parseInt(time.substring(3, 5));
			int sec = Integer.parseInt(time.substring(6, 8));

			ZonedDateTime zdt = ZonedDateTime.now();
			LocalDate date = m_datepicker.getDate().toInstant().atZone(ApplicationSettings.getInstance().getTimeZone().toZoneId()).toLocalDate();
			LocalTime timestr = LocalTime.of(hr, min, sec);
			zdt = ZonedDateTime.of(date, timestr, ApplicationSettings.getInstance().getTimeZone().toZoneId());

			CalendarItem item = new CalendarItem(summary, desc, zdt, duration);
			Calendar calendar = (Calendar) m_comboBox.getSelectedItem();

			((TaskPlannerController) getController()).addCalendarItem(calendar, item);
			this.clearComponents();
			this.setVisible(false);
		}
	}
}
